{"version":3,"sources":["skylark-jquery-treetable.js"],"names":[],"mappingsfile":"../skylark-jquery-treetable.js","sourcesContent":["define('skylark-jquery-treetable/treetable',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"intg.treetable\",{});\r\n});\ndefine('skylark-jquery-treetable/Node',[\r\n\t\"skylark-jquery\",\r\n\t\"./treetable\"\r\n],function($,treetable){\r\n    function Node(row, tree, settings) {\r\n      var parentId;\r\n\r\n      this.row = row;\r\n      this.tree = tree;\r\n      this.settings = settings;\r\n\r\n      // TODO Ensure id/parentId is always a string (not int)\r\n      this.id = this.row.data(this.settings.nodeIdAttr);\r\n\r\n      // TODO Move this to a setParentId function?\r\n      parentId = this.row.data(this.settings.parentIdAttr);\r\n      if (parentId != null && parentId !== \"\") {\r\n        this.parentId = parentId;\r\n      }\r\n\r\n      this.treeCell = $(this.row.children(this.settings.columnElType)[this.settings.column]);\r\n      this.expander = $(this.settings.expanderTemplate);\r\n      this.indenter = $(this.settings.indenterTemplate);\r\n      this.children = [];\r\n      this.initialized = false;\r\n      this.treeCell.prepend(this.indenter);\r\n    }\r\n\r\n    Node.prototype.addChild = function(child) {\r\n      return this.children.push(child);\r\n    };\r\n\r\n    Node.prototype.ancestors = function() {\r\n      var ancestors, node;\r\n      node = this;\r\n      ancestors = [];\r\n      while (node = node.parentNode()) {\r\n        ancestors.push(node);\r\n      }\r\n      return ancestors;\r\n    };\r\n\r\n    Node.prototype.collapse = function() {\r\n      if (this.collapsed()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"expanded\").addClass(\"collapsed\");\r\n\r\n      this._hideChildren();\r\n      this.expander.attr(\"title\", this.settings.stringExpand);\r\n\r\n      if (this.initialized && this.settings.onNodeCollapse != null) {\r\n        this.settings.onNodeCollapse.apply(this);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.collapsed = function() {\r\n      return this.row.hasClass(\"collapsed\");\r\n    };\r\n\r\n    // TODO destroy: remove event handlers, expander, indenter, etc.\r\n\r\n    Node.prototype.expand = function() {\r\n      if (this.expanded()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"collapsed\").addClass(\"expanded\");\r\n\r\n      if (this.initialized && this.settings.onNodeExpand != null) {\r\n        this.settings.onNodeExpand.apply(this);\r\n      }\r\n\r\n      if ($(this.row).is(\":visible\")) {\r\n        this._showChildren();\r\n      }\r\n\r\n      this.expander.attr(\"title\", this.settings.stringCollapse);\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.expanded = function() {\r\n      return this.row.hasClass(\"expanded\");\r\n    };\r\n\r\n    Node.prototype.hide = function() {\r\n      this._hideChildren();\r\n      this.row.hide();\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.isBranchNode = function() {\r\n      if(this.children.length > 0 || this.row.data(this.settings.branchAttr) === true) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n\r\n    Node.prototype.updateBranchLeafClass = function(){\r\n      this.row.removeClass('branch');\r\n      this.row.removeClass('leaf');\r\n      this.row.addClass(this.isBranchNode() ? 'branch' : 'leaf');\r\n    };\r\n\r\n    Node.prototype.level = function() {\r\n      return this.ancestors().length;\r\n    };\r\n\r\n    Node.prototype.parentNode = function() {\r\n      if (this.parentId != null) {\r\n        return this.tree[this.parentId];\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    Node.prototype.removeChild = function(child) {\r\n      var i = $.inArray(child, this.children);\r\n      return this.children.splice(i, 1)\r\n    };\r\n\r\n    Node.prototype.render = function() {\r\n      var handler,\r\n          settings = this.settings,\r\n          target;\r\n\r\n      if (settings.expandable === true && this.isBranchNode()) {\r\n        handler = function(e) {\r\n          $(this).parents(\"table\").treetable(\"node\", $(this).parents(\"tr\").data(settings.nodeIdAttr)).toggle();\r\n          return e.preventDefault();\r\n        };\r\n\r\n        this.indenter.html(this.expander);\r\n        target = settings.clickableNodeNames === true ? this.treeCell : this.expander;\r\n\r\n        target.off(\"click.treetable\").on(\"click.treetable\", handler);\r\n        target.off(\"keydown.treetable\").on(\"keydown.treetable\", function(e) {\r\n          if (e.keyCode == 13) {\r\n            handler.apply(this, [e]);\r\n          }\r\n        });\r\n      }\r\n\r\n      this.indenter[0].style.paddingLeft = \"\" + (this.level() * settings.indent) + \"px\";\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.reveal = function() {\r\n      if (this.parentId != null) {\r\n        this.parentNode().reveal();\r\n      }\r\n      return this.expand();\r\n    };\r\n\r\n    Node.prototype.setParent = function(node) {\r\n      if (this.parentId != null) {\r\n        this.tree[this.parentId].removeChild(this);\r\n      }\r\n      this.parentId = node.id;\r\n      this.row.data(this.settings.parentIdAttr, node.id);\r\n      return node.addChild(this);\r\n    };\r\n\r\n    Node.prototype.show = function() {\r\n      if (!this.initialized) {\r\n        this._initialize();\r\n      }\r\n      this.row.show();\r\n      if (this.expanded()) {\r\n        this._showChildren();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.toggle = function() {\r\n      if (this.expanded()) {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype._hideChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.hide());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Node.prototype._initialize = function() {\r\n      var settings = this.settings;\r\n\r\n      this.render();\r\n\r\n      if (settings.expandable === true && settings.initialState === \"collapsed\") {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n\r\n      if (settings.onNodeInitialized != null) {\r\n        settings.onNodeInitialized.apply(this);\r\n      }\r\n\r\n      return this.initialized = true;\r\n    };\r\n\r\n    Node.prototype._showChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.show());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    return treetable.Node = Node;\r\n\r\n});\ndefine('skylark-jquery-treetable/Tree',[\r\n\t\"skylark-jquery\",\r\n\t\"./treetable\",\r\n\t\"./Node\"\r\n],function($,treetable,Node){\r\n\r\n    function Tree(table, settings) {\r\n      this.table = table;\r\n      this.settings = settings;\r\n      this.tree = {};\r\n\r\n      // Cache the nodes and roots in simple arrays for quick access/iteration\r\n      this.nodes = [];\r\n      this.roots = [];\r\n    }\r\n\r\n    Tree.prototype.collapseAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.collapse());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.expandAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.expand());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.findLastNode = function (node) {\r\n      if (node.children.length > 0) {\r\n        return this.findLastNode(node.children[node.children.length - 1]);\r\n      } else {\r\n        return node;\r\n      }\r\n    };\r\n\r\n    Tree.prototype.loadRows = function(rows) {\r\n      var node, row, i;\r\n\r\n      if (rows != null) {\r\n        for (i = 0; i < rows.length; i++) {\r\n          row = $(rows[i]);\r\n\r\n          if (row.data(this.settings.nodeIdAttr) != null) {\r\n            node = new Node(row, this.tree, this.settings);\r\n            this.nodes.push(node);\r\n            this.tree[node.id] = node;\r\n\r\n            if (node.parentId != null && this.tree[node.parentId]) {\r\n              this.tree[node.parentId].addChild(node);\r\n            } else {\r\n              this.roots.push(node);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        node = this.nodes[i].updateBranchLeafClass();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.move = function(node, destination) {\r\n      // Conditions:\r\n      // 1: +node+ should not be inserted as a child of +node+ itself.\r\n      // 2: +destination+ should not be the same as +node+'s current parent (this\r\n      //    prevents +node+ from being moved to the same location where it already\r\n      //    is).\r\n      // 3: +node+ should not be inserted in a location in a branch if this would\r\n      //    result in +node+ being an ancestor of itself.\r\n      var nodeParent = node.parentNode();\r\n      if (node !== destination && destination.id !== node.parentId && $.inArray(node, destination.ancestors()) === -1) {\r\n        node.setParent(destination);\r\n        this._moveRows(node, destination);\r\n\r\n        // Re-render parentNode if this is its first child node, and therefore\r\n        // doesn't have the expander yet.\r\n        if (node.parentNode().children.length === 1) {\r\n          node.parentNode().render();\r\n        }\r\n      }\r\n\r\n      if(nodeParent){\r\n        nodeParent.updateBranchLeafClass();\r\n      }\r\n      if(node.parentNode()){\r\n        node.parentNode().updateBranchLeafClass();\r\n      }\r\n      node.updateBranchLeafClass();\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.removeNode = function(node) {\r\n      // Recursively remove all descendants of +node+\r\n      this.unloadBranch(node);\r\n\r\n      // Remove node from DOM (<tr>)\r\n      node.row.remove();\r\n\r\n      // Remove node from parent children list\r\n      if (node.parentId != null) {\r\n        node.parentNode().removeChild(node);\r\n      }\r\n\r\n      // Clean up Tree object (so Node objects are GC-ed)\r\n      delete this.tree[node.id];\r\n      this.nodes.splice($.inArray(node, this.nodes), 1);\r\n\r\n      return this;\r\n    }\r\n\r\n    Tree.prototype.render = function() {\r\n      var root, _i, _len, _ref;\r\n      _ref = this.roots;\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        root = _ref[_i];\r\n\r\n        // Naming is confusing (show/render). I do not call render on node from\r\n        // here.\r\n        root.show();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.sortBranch = function(node, sortFun) {\r\n      // First sort internal array of children\r\n      node.children.sort(sortFun);\r\n\r\n      // Next render rows in correct order on page\r\n      this._sortChildRows(node);\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.unloadBranch = function(node) {\r\n      // Use a copy of the children array to not have other functions interfere\r\n      // with this function if they manipulate the children array\r\n      // (eg removeNode).\r\n      var children = node.children.slice(0),\r\n          i;\r\n\r\n      for (i = 0; i < children.length; i++) {\r\n        this.removeNode(children[i]);\r\n      }\r\n\r\n      // Reset node's collection of children\r\n      node.children = [];\r\n\r\n      node.updateBranchLeafClass();\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype._moveRows = function(node, destination) {\r\n      var children = node.children, i;\r\n\r\n      node.row.insertAfter(destination.row);\r\n      node.render();\r\n\r\n      // Loop backwards through children to have them end up on UI in correct\r\n      // order (see #112)\r\n      for (i = children.length - 1; i >= 0; i--) {\r\n        this._moveRows(children[i], node);\r\n      }\r\n    };\r\n\r\n    // Special _moveRows case, move children to itself to force sorting\r\n    Tree.prototype._sortChildRows = function(parentNode) {\r\n      return this._moveRows(parentNode, parentNode);\r\n    };\r\n\r\n    return treetable.Tree = Tree;\t\r\n});\ndefine('skylark-jquery-treetable/jquery.treetable',[\n  \"skylark-jquery\",\n  \"./treetable\",\n  \"./Node\",\n  \"./Tree\"\n],function($,treetable,Node,Tree){\n\n  // jQuery Plugin\n  var methods = {\n    init: function(options, force) {\n      var settings;\n\n      settings = $.extend({\n        branchAttr: \"ttBranch\",\n        clickableNodeNames: false,\n        column: 0,\n        columnElType: \"td\", // i.e. 'td', 'th' or 'td,th'\n        expandable: false,\n        expanderTemplate: \"<a href='#'>&nbsp;</a>\",\n        indent: 19,\n        indenterTemplate: \"<span class='indenter'></span>\",\n        initialState: \"collapsed\",\n        nodeIdAttr: \"ttId\", // maps to data-tt-id\n        parentIdAttr: \"ttParentId\", // maps to data-tt-parent-id\n        stringExpand: \"Expand\",\n        stringCollapse: \"Collapse\",\n\n        // Events\n        onInitialized: null,\n        onNodeCollapse: null,\n        onNodeExpand: null,\n        onNodeInitialized: null\n      }, options);\n\n      return this.each(function() {\n        var el = $(this), tree;\n\n        //if (force || el.data(\"treetable\") === undefined) {\n        if (force || !el.data(\"treetable\") ) {\n          tree = new Tree(this, settings);\n          tree.loadRows(this.rows).render();\n\n          el.addClass(\"treetable\").data(\"treetable\", tree);\n\n          if (settings.onInitialized != null) {\n            settings.onInitialized.apply(tree);\n          }\n        }\n\n        return el;\n      });\n    },\n\n    destroy: function() {\n      return this.each(function() {\n        return $(this).removeData(\"treetable\").removeClass(\"treetable\");\n      });\n    },\n\n    collapseAll: function() {\n      this.data(\"treetable\").collapseAll();\n      return this;\n    },\n\n    collapseNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.collapse();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    expandAll: function() {\n      this.data(\"treetable\").expandAll();\n      return this;\n    },\n\n    expandNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        if (!node.initialized) {\n          node._initialize();\n        }\n\n        node.expand();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    loadBranch: function(node, rows) {\n      var settings = this.data(\"treetable\").settings,\n          tree = this.data(\"treetable\").tree;\n\n      // TODO Switch to $.parseHTML\n      rows = $(rows);\n\n      if (node == null) { // Inserting new root nodes\n        this.append(rows);\n      } else {\n        var lastNode = this.data(\"treetable\").findLastNode(node);\n        rows.insertAfter(lastNode.row);\n      }\n\n      this.data(\"treetable\").loadRows(rows);\n\n      // Make sure nodes are properly initialized\n      rows.filter(\"tr\").each(function() {\n        tree[$(this).data(settings.nodeIdAttr)].show();\n      });\n\n      if (node != null) {\n        // Re-render parent to ensure expander icon is shown (#79)\n        node.render().expand();\n      }\n\n      return this;\n    },\n\n    move: function(nodeId, destinationId) {\n      var destination, node;\n\n      node = this.data(\"treetable\").tree[nodeId];\n      destination = this.data(\"treetable\").tree[destinationId];\n      this.data(\"treetable\").move(node, destination);\n\n      return this;\n    },\n\n    node: function(id) {\n      return this.data(\"treetable\").tree[id];\n    },\n\n    removeNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        this.data(\"treetable\").removeNode(node);\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    reveal: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.reveal();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    sortBranch: function(node, columnOrFunction) {\n      var settings = this.data(\"treetable\").settings,\n          prepValue,\n          sortFun;\n\n      columnOrFunction = columnOrFunction || settings.column;\n      sortFun = columnOrFunction;\n\n      if ($.isNumeric(columnOrFunction)) {\n        sortFun = function(a, b) {\n          var extractValue, valA, valB;\n\n          extractValue = function(node) {\n            var val = node.row.find(\"td:eq(\" + columnOrFunction + \")\").text();\n            // Ignore trailing/leading whitespace and use uppercase values for\n            // case insensitive ordering\n            return $.trim(val).toUpperCase();\n          }\n\n          valA = extractValue(a);\n          valB = extractValue(b);\n\n          if (valA < valB) return -1;\n          if (valA > valB) return 1;\n          return 0;\n        };\n      }\n\n      this.data(\"treetable\").sortBranch(node, sortFun);\n      return this;\n    },\n\n    unloadBranch: function(node) {\n      this.data(\"treetable\").unloadBranch(node);\n      return this;\n    }\n  };\n\n  $.fn.treetable = function(method) {\n    if (methods[method]) {\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      return $.error(\"Method \" + method + \" does not exist on jQuery.treetable\");\n    }\n  };\n\n  return $;\n});\n\ndefine('skylark-jquery-treetable/main',[\r\n  \"./treetable\",\r\n  \"./Node\",\r\n  \"./Tree\",\r\n  \"./jquery.treetable\"\r\n],function(treetable,Node,Tree){\r\n\treturn treetable;\r\n});\ndefine('skylark-jquery-treetable', ['skylark-jquery-treetable/main'], function (main) { return main; });\n\n"]}