{"version":3,"sources":["jquery.treetable.js"],"names":["define","$","treetable","Node","Tree","methods","init","options","force","settings","extend","branchAttr","clickableNodeNames","column","columnElType","expandable","expanderTemplate","indent","indenterTemplate","initialState","nodeIdAttr","parentIdAttr","stringExpand","stringCollapse","onInitialized","onNodeCollapse","onNodeExpand","onNodeInitialized","this","each","tree","el","data","loadRows","rows","render","addClass","apply","destroy","removeData","removeClass","collapseAll","collapseNode","id","node","Error","collapse","expandAll","expandNode","initialized","_initialize","expand","loadBranch","append","lastNode","findLastNode","insertAfter","row","filter","show","move","nodeId","destinationId","destination","removeNode","reveal","sortBranch","columnOrFunction","sortFun","isNumeric","a","b","extractValue","valA","valB","val","find","text","trim","toUpperCase","unloadBranch","fn","method","Array","prototype","slice","call","arguments","error"],"mappings":"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","file":"../jquery.treetable.js","sourcesContent":["define([\n  \"skylark-jquery\",\n  \"./treetable\",\n  \"./Node\",\n  \"./Tree\"\n],function($,treetable,Node,Tree){\n\n  // jQuery Plugin\n  var methods = {\n    init: function(options, force) {\n      var settings;\n\n      settings = $.extend({\n        branchAttr: \"ttBranch\",\n        clickableNodeNames: false,\n        column: 0,\n        columnElType: \"td\", // i.e. 'td', 'th' or 'td,th'\n        expandable: false,\n        expanderTemplate: \"<a href='#'>&nbsp;</a>\",\n        indent: 19,\n        indenterTemplate: \"<span class='indenter'></span>\",\n        initialState: \"collapsed\",\n        nodeIdAttr: \"ttId\", // maps to data-tt-id\n        parentIdAttr: \"ttParentId\", // maps to data-tt-parent-id\n        stringExpand: \"Expand\",\n        stringCollapse: \"Collapse\",\n\n        // Events\n        onInitialized: null,\n        onNodeCollapse: null,\n        onNodeExpand: null,\n        onNodeInitialized: null\n      }, options);\n\n      return this.each(function() {\n        var el = $(this), tree;\n\n        //if (force || el.data(\"treetable\") === undefined) {\n        if (force || !el.data(\"treetable\") ) {\n          tree = new Tree(this, settings);\n          tree.loadRows(this.rows).render();\n\n          el.addClass(\"treetable\").data(\"treetable\", tree);\n\n          if (settings.onInitialized != null) {\n            settings.onInitialized.apply(tree);\n          }\n        }\n\n        return el;\n      });\n    },\n\n    destroy: function() {\n      return this.each(function() {\n        return $(this).removeData(\"treetable\").removeClass(\"treetable\");\n      });\n    },\n\n    collapseAll: function() {\n      this.data(\"treetable\").collapseAll();\n      return this;\n    },\n\n    collapseNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.collapse();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    expandAll: function() {\n      this.data(\"treetable\").expandAll();\n      return this;\n    },\n\n    expandNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        if (!node.initialized) {\n          node._initialize();\n        }\n\n        node.expand();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    loadBranch: function(node, rows) {\n      var settings = this.data(\"treetable\").settings,\n          tree = this.data(\"treetable\").tree;\n\n      // TODO Switch to $.parseHTML\n      rows = $(rows);\n\n      if (node == null) { // Inserting new root nodes\n        this.append(rows);\n      } else {\n        var lastNode = this.data(\"treetable\").findLastNode(node);\n        rows.insertAfter(lastNode.row);\n      }\n\n      this.data(\"treetable\").loadRows(rows);\n\n      // Make sure nodes are properly initialized\n      rows.filter(\"tr\").each(function() {\n        tree[$(this).data(settings.nodeIdAttr)].show();\n      });\n\n      if (node != null) {\n        // Re-render parent to ensure expander icon is shown (#79)\n        node.render().expand();\n      }\n\n      return this;\n    },\n\n    move: function(nodeId, destinationId) {\n      var destination, node;\n\n      node = this.data(\"treetable\").tree[nodeId];\n      destination = this.data(\"treetable\").tree[destinationId];\n      this.data(\"treetable\").move(node, destination);\n\n      return this;\n    },\n\n    node: function(id) {\n      return this.data(\"treetable\").tree[id];\n    },\n\n    removeNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        this.data(\"treetable\").removeNode(node);\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    reveal: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.reveal();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    sortBranch: function(node, columnOrFunction) {\n      var settings = this.data(\"treetable\").settings,\n          prepValue,\n          sortFun;\n\n      columnOrFunction = columnOrFunction || settings.column;\n      sortFun = columnOrFunction;\n\n      if ($.isNumeric(columnOrFunction)) {\n        sortFun = function(a, b) {\n          var extractValue, valA, valB;\n\n          extractValue = function(node) {\n            var val = node.row.find(\"td:eq(\" + columnOrFunction + \")\").text();\n            // Ignore trailing/leading whitespace and use uppercase values for\n            // case insensitive ordering\n            return $.trim(val).toUpperCase();\n          }\n\n          valA = extractValue(a);\n          valB = extractValue(b);\n\n          if (valA < valB) return -1;\n          if (valA > valB) return 1;\n          return 0;\n        };\n      }\n\n      this.data(\"treetable\").sortBranch(node, sortFun);\n      return this;\n    },\n\n    unloadBranch: function(node) {\n      this.data(\"treetable\").unloadBranch(node);\n      return this;\n    }\n  };\n\n  $.fn.treetable = function(method) {\n    if (methods[method]) {\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      return $.error(\"Method \" + method + \" does not exist on jQuery.treetable\");\n    }\n  };\n\n  return $;\n});\n"]}