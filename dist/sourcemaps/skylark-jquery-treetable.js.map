{"version":3,"sources":["skylark-jquery-treetable.js"],"names":["define","skylark","attach","$","treetable","Node","row","tree","settings","parentId","this","id","data","nodeIdAttr","parentIdAttr","treeCell","children","columnElType","column","expander","expanderTemplate","indenter","indenterTemplate","initialized","prepend","prototype","addChild","child","push","ancestors","node","parentNode","collapse","collapsed","removeClass","addClass","_hideChildren","attr","stringExpand","onNodeCollapse","apply","hasClass","expand","expanded","onNodeExpand","is","_showChildren","stringCollapse","hide","isBranchNode","length","branchAttr","updateBranchLeafClass","level","removeChild","i","inArray","splice","render","handler","target","expandable","e","parents","toggle","preventDefault","html","clickableNodeNames","off","on","keyCode","style","paddingLeft","indent","reveal","setParent","show","_initialize","_i","_len","_ref","_results","initialState","onNodeInitialized","Tree","table","nodes","roots","collapseAll","expandAll","findLastNode","loadRows","rows","move","destination","nodeParent","_moveRows","removeNode","unloadBranch","remove","sortBranch","sortFun","sort","_sortChildRows","slice","insertAfter","methods","init","options","force","extend","onInitialized","each","el","destroy","removeData","collapseNode","Error","expandNode","loadBranch","append","lastNode","filter","nodeId","destinationId","columnOrFunction","isNumeric","a","b","extractValue","valA","valB","val","find","text","trim","toUpperCase","fn","method","Array","call","arguments","error","main"],"mappings":"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","file":"../skylark-jquery-treetable.js","sourcesContent":["define('skylark-jquery-treetable/treetable',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"intg.treetable\",{});\r\n});\ndefine('skylark-jquery-treetable/Node',[\r\n\t\"skylark-jquery\",\r\n\t\"./treetable\"\r\n],function($,treetable){\r\n    function Node(row, tree, settings) {\r\n      var parentId;\r\n\r\n      this.row = row;\r\n      this.tree = tree;\r\n      this.settings = settings;\r\n\r\n      // TODO Ensure id/parentId is always a string (not int)\r\n      this.id = this.row.data(this.settings.nodeIdAttr);\r\n\r\n      // TODO Move this to a setParentId function?\r\n      parentId = this.row.data(this.settings.parentIdAttr);\r\n      if (parentId != null && parentId !== \"\") {\r\n        this.parentId = parentId;\r\n      }\r\n\r\n      this.treeCell = $(this.row.children(this.settings.columnElType)[this.settings.column]);\r\n      this.expander = $(this.settings.expanderTemplate);\r\n      this.indenter = $(this.settings.indenterTemplate);\r\n      this.children = [];\r\n      this.initialized = false;\r\n      this.treeCell.prepend(this.indenter);\r\n    }\r\n\r\n    Node.prototype.addChild = function(child) {\r\n      return this.children.push(child);\r\n    };\r\n\r\n    Node.prototype.ancestors = function() {\r\n      var ancestors, node;\r\n      node = this;\r\n      ancestors = [];\r\n      while (node = node.parentNode()) {\r\n        ancestors.push(node);\r\n      }\r\n      return ancestors;\r\n    };\r\n\r\n    Node.prototype.collapse = function() {\r\n      if (this.collapsed()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"expanded\").addClass(\"collapsed\");\r\n\r\n      this._hideChildren();\r\n      this.expander.attr(\"title\", this.settings.stringExpand);\r\n\r\n      if (this.initialized && this.settings.onNodeCollapse != null) {\r\n        this.settings.onNodeCollapse.apply(this);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.collapsed = function() {\r\n      return this.row.hasClass(\"collapsed\");\r\n    };\r\n\r\n    // TODO destroy: remove event handlers, expander, indenter, etc.\r\n\r\n    Node.prototype.expand = function() {\r\n      if (this.expanded()) {\r\n        return this;\r\n      }\r\n\r\n      this.row.removeClass(\"collapsed\").addClass(\"expanded\");\r\n\r\n      if (this.initialized && this.settings.onNodeExpand != null) {\r\n        this.settings.onNodeExpand.apply(this);\r\n      }\r\n\r\n      if ($(this.row).is(\":visible\")) {\r\n        this._showChildren();\r\n      }\r\n\r\n      this.expander.attr(\"title\", this.settings.stringCollapse);\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.expanded = function() {\r\n      return this.row.hasClass(\"expanded\");\r\n    };\r\n\r\n    Node.prototype.hide = function() {\r\n      this._hideChildren();\r\n      this.row.hide();\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.isBranchNode = function() {\r\n      if(this.children.length > 0 || this.row.data(this.settings.branchAttr) === true) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n\r\n    Node.prototype.updateBranchLeafClass = function(){\r\n      this.row.removeClass('branch');\r\n      this.row.removeClass('leaf');\r\n      this.row.addClass(this.isBranchNode() ? 'branch' : 'leaf');\r\n    };\r\n\r\n    Node.prototype.level = function() {\r\n      return this.ancestors().length;\r\n    };\r\n\r\n    Node.prototype.parentNode = function() {\r\n      if (this.parentId != null) {\r\n        return this.tree[this.parentId];\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    Node.prototype.removeChild = function(child) {\r\n      var i = $.inArray(child, this.children);\r\n      return this.children.splice(i, 1)\r\n    };\r\n\r\n    Node.prototype.render = function() {\r\n      var handler,\r\n          settings = this.settings,\r\n          target;\r\n\r\n      if (settings.expandable === true && this.isBranchNode()) {\r\n        handler = function(e) {\r\n          $(this).parents(\"table\").treetable(\"node\", $(this).parents(\"tr\").data(settings.nodeIdAttr)).toggle();\r\n          return e.preventDefault();\r\n        };\r\n\r\n        this.indenter.html(this.expander);\r\n        target = settings.clickableNodeNames === true ? this.treeCell : this.expander;\r\n\r\n        target.off(\"click.treetable\").on(\"click.treetable\", handler);\r\n        target.off(\"keydown.treetable\").on(\"keydown.treetable\", function(e) {\r\n          if (e.keyCode == 13) {\r\n            handler.apply(this, [e]);\r\n          }\r\n        });\r\n      }\r\n\r\n      this.indenter[0].style.paddingLeft = \"\" + (this.level() * settings.indent) + \"px\";\r\n\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.reveal = function() {\r\n      if (this.parentId != null) {\r\n        this.parentNode().reveal();\r\n      }\r\n      return this.expand();\r\n    };\r\n\r\n    Node.prototype.setParent = function(node) {\r\n      if (this.parentId != null) {\r\n        this.tree[this.parentId].removeChild(this);\r\n      }\r\n      this.parentId = node.id;\r\n      this.row.data(this.settings.parentIdAttr, node.id);\r\n      return node.addChild(this);\r\n    };\r\n\r\n    Node.prototype.show = function() {\r\n      if (!this.initialized) {\r\n        this._initialize();\r\n      }\r\n      this.row.show();\r\n      if (this.expanded()) {\r\n        this._showChildren();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype.toggle = function() {\r\n      if (this.expanded()) {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Node.prototype._hideChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.hide());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Node.prototype._initialize = function() {\r\n      var settings = this.settings;\r\n\r\n      this.render();\r\n\r\n      if (settings.expandable === true && settings.initialState === \"collapsed\") {\r\n        this.collapse();\r\n      } else {\r\n        this.expand();\r\n      }\r\n\r\n      if (settings.onNodeInitialized != null) {\r\n        settings.onNodeInitialized.apply(this);\r\n      }\r\n\r\n      return this.initialized = true;\r\n    };\r\n\r\n    Node.prototype._showChildren = function() {\r\n      var child, _i, _len, _ref, _results;\r\n      _ref = this.children;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        child = _ref[_i];\r\n        _results.push(child.show());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    return treetable.Node = Node;\r\n\r\n});\ndefine('skylark-jquery-treetable/Tree',[\r\n\t\"skylark-jquery\",\r\n\t\"./treetable\",\r\n\t\"./Node\"\r\n],function($,treetable,Node){\r\n\r\n    function Tree(table, settings) {\r\n      this.table = table;\r\n      this.settings = settings;\r\n      this.tree = {};\r\n\r\n      // Cache the nodes and roots in simple arrays for quick access/iteration\r\n      this.nodes = [];\r\n      this.roots = [];\r\n    }\r\n\r\n    Tree.prototype.collapseAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.collapse());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.expandAll = function() {\r\n      var node, _i, _len, _ref, _results;\r\n      _ref = this.nodes;\r\n      _results = [];\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        node = _ref[_i];\r\n        _results.push(node.expand());\r\n      }\r\n      return _results;\r\n    };\r\n\r\n    Tree.prototype.findLastNode = function (node) {\r\n      if (node.children.length > 0) {\r\n        return this.findLastNode(node.children[node.children.length - 1]);\r\n      } else {\r\n        return node;\r\n      }\r\n    };\r\n\r\n    Tree.prototype.loadRows = function(rows) {\r\n      var node, row, i;\r\n\r\n      if (rows != null) {\r\n        for (i = 0; i < rows.length; i++) {\r\n          row = $(rows[i]);\r\n\r\n          if (row.data(this.settings.nodeIdAttr) != null) {\r\n            node = new Node(row, this.tree, this.settings);\r\n            this.nodes.push(node);\r\n            this.tree[node.id] = node;\r\n\r\n            if (node.parentId != null && this.tree[node.parentId]) {\r\n              this.tree[node.parentId].addChild(node);\r\n            } else {\r\n              this.roots.push(node);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < this.nodes.length; i++) {\r\n        node = this.nodes[i].updateBranchLeafClass();\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.move = function(node, destination) {\r\n      // Conditions:\r\n      // 1: +node+ should not be inserted as a child of +node+ itself.\r\n      // 2: +destination+ should not be the same as +node+'s current parent (this\r\n      //    prevents +node+ from being moved to the same location where it already\r\n      //    is).\r\n      // 3: +node+ should not be inserted in a location in a branch if this would\r\n      //    result in +node+ being an ancestor of itself.\r\n      var nodeParent = node.parentNode();\r\n      if (node !== destination && destination.id !== node.parentId && $.inArray(node, destination.ancestors()) === -1) {\r\n        node.setParent(destination);\r\n        this._moveRows(node, destination);\r\n\r\n        // Re-render parentNode if this is its first child node, and therefore\r\n        // doesn't have the expander yet.\r\n        if (node.parentNode().children.length === 1) {\r\n          node.parentNode().render();\r\n        }\r\n      }\r\n\r\n      if(nodeParent){\r\n        nodeParent.updateBranchLeafClass();\r\n      }\r\n      if(node.parentNode()){\r\n        node.parentNode().updateBranchLeafClass();\r\n      }\r\n      node.updateBranchLeafClass();\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.removeNode = function(node) {\r\n      // Recursively remove all descendants of +node+\r\n      this.unloadBranch(node);\r\n\r\n      // Remove node from DOM (<tr>)\r\n      node.row.remove();\r\n\r\n      // Remove node from parent children list\r\n      if (node.parentId != null) {\r\n        node.parentNode().removeChild(node);\r\n      }\r\n\r\n      // Clean up Tree object (so Node objects are GC-ed)\r\n      delete this.tree[node.id];\r\n      this.nodes.splice($.inArray(node, this.nodes), 1);\r\n\r\n      return this;\r\n    }\r\n\r\n    Tree.prototype.render = function() {\r\n      var root, _i, _len, _ref;\r\n      _ref = this.roots;\r\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n        root = _ref[_i];\r\n\r\n        // Naming is confusing (show/render). I do not call render on node from\r\n        // here.\r\n        root.show();\r\n      }\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.sortBranch = function(node, sortFun) {\r\n      // First sort internal array of children\r\n      node.children.sort(sortFun);\r\n\r\n      // Next render rows in correct order on page\r\n      this._sortChildRows(node);\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype.unloadBranch = function(node) {\r\n      // Use a copy of the children array to not have other functions interfere\r\n      // with this function if they manipulate the children array\r\n      // (eg removeNode).\r\n      var children = node.children.slice(0),\r\n          i;\r\n\r\n      for (i = 0; i < children.length; i++) {\r\n        this.removeNode(children[i]);\r\n      }\r\n\r\n      // Reset node's collection of children\r\n      node.children = [];\r\n\r\n      node.updateBranchLeafClass();\r\n\r\n      return this;\r\n    };\r\n\r\n    Tree.prototype._moveRows = function(node, destination) {\r\n      var children = node.children, i;\r\n\r\n      node.row.insertAfter(destination.row);\r\n      node.render();\r\n\r\n      // Loop backwards through children to have them end up on UI in correct\r\n      // order (see #112)\r\n      for (i = children.length - 1; i >= 0; i--) {\r\n        this._moveRows(children[i], node);\r\n      }\r\n    };\r\n\r\n    // Special _moveRows case, move children to itself to force sorting\r\n    Tree.prototype._sortChildRows = function(parentNode) {\r\n      return this._moveRows(parentNode, parentNode);\r\n    };\r\n\r\n    return treetable.Tree = Tree;\t\r\n});\ndefine('skylark-jquery-treetable/jquery.treetable',[\n  \"skylark-jquery\",\n  \"./treetable\",\n  \"./Node\",\n  \"./Tree\"\n],function($,treetable,Node,Tree){\n\n  // jQuery Plugin\n  var methods = {\n    init: function(options, force) {\n      var settings;\n\n      settings = $.extend({\n        branchAttr: \"ttBranch\",\n        clickableNodeNames: false,\n        column: 0,\n        columnElType: \"td\", // i.e. 'td', 'th' or 'td,th'\n        expandable: false,\n        expanderTemplate: \"<a href='#'>&nbsp;</a>\",\n        indent: 19,\n        indenterTemplate: \"<span class='indenter'></span>\",\n        initialState: \"collapsed\",\n        nodeIdAttr: \"ttId\", // maps to data-tt-id\n        parentIdAttr: \"ttParentId\", // maps to data-tt-parent-id\n        stringExpand: \"Expand\",\n        stringCollapse: \"Collapse\",\n\n        // Events\n        onInitialized: null,\n        onNodeCollapse: null,\n        onNodeExpand: null,\n        onNodeInitialized: null\n      }, options);\n\n      return this.each(function() {\n        var el = $(this), tree;\n\n        //if (force || el.data(\"treetable\") === undefined) {\n        if (force || !el.data(\"treetable\") ) {\n          tree = new Tree(this, settings);\n          tree.loadRows(this.rows).render();\n\n          el.addClass(\"treetable\").data(\"treetable\", tree);\n\n          if (settings.onInitialized != null) {\n            settings.onInitialized.apply(tree);\n          }\n        }\n\n        return el;\n      });\n    },\n\n    destroy: function() {\n      return this.each(function() {\n        return $(this).removeData(\"treetable\").removeClass(\"treetable\");\n      });\n    },\n\n    collapseAll: function() {\n      this.data(\"treetable\").collapseAll();\n      return this;\n    },\n\n    collapseNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.collapse();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    expandAll: function() {\n      this.data(\"treetable\").expandAll();\n      return this;\n    },\n\n    expandNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        if (!node.initialized) {\n          node._initialize();\n        }\n\n        node.expand();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    loadBranch: function(node, rows) {\n      var settings = this.data(\"treetable\").settings,\n          tree = this.data(\"treetable\").tree;\n\n      // TODO Switch to $.parseHTML\n      rows = $(rows);\n\n      if (node == null) { // Inserting new root nodes\n        this.append(rows);\n      } else {\n        var lastNode = this.data(\"treetable\").findLastNode(node);\n        rows.insertAfter(lastNode.row);\n      }\n\n      this.data(\"treetable\").loadRows(rows);\n\n      // Make sure nodes are properly initialized\n      rows.filter(\"tr\").each(function() {\n        tree[$(this).data(settings.nodeIdAttr)].show();\n      });\n\n      if (node != null) {\n        // Re-render parent to ensure expander icon is shown (#79)\n        node.render().expand();\n      }\n\n      return this;\n    },\n\n    move: function(nodeId, destinationId) {\n      var destination, node;\n\n      node = this.data(\"treetable\").tree[nodeId];\n      destination = this.data(\"treetable\").tree[destinationId];\n      this.data(\"treetable\").move(node, destination);\n\n      return this;\n    },\n\n    node: function(id) {\n      return this.data(\"treetable\").tree[id];\n    },\n\n    removeNode: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        this.data(\"treetable\").removeNode(node);\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    reveal: function(id) {\n      var node = this.data(\"treetable\").tree[id];\n\n      if (node) {\n        node.reveal();\n      } else {\n        throw new Error(\"Unknown node '\" + id + \"'\");\n      }\n\n      return this;\n    },\n\n    sortBranch: function(node, columnOrFunction) {\n      var settings = this.data(\"treetable\").settings,\n          prepValue,\n          sortFun;\n\n      columnOrFunction = columnOrFunction || settings.column;\n      sortFun = columnOrFunction;\n\n      if ($.isNumeric(columnOrFunction)) {\n        sortFun = function(a, b) {\n          var extractValue, valA, valB;\n\n          extractValue = function(node) {\n            var val = node.row.find(\"td:eq(\" + columnOrFunction + \")\").text();\n            // Ignore trailing/leading whitespace and use uppercase values for\n            // case insensitive ordering\n            return $.trim(val).toUpperCase();\n          }\n\n          valA = extractValue(a);\n          valB = extractValue(b);\n\n          if (valA < valB) return -1;\n          if (valA > valB) return 1;\n          return 0;\n        };\n      }\n\n      this.data(\"treetable\").sortBranch(node, sortFun);\n      return this;\n    },\n\n    unloadBranch: function(node) {\n      this.data(\"treetable\").unloadBranch(node);\n      return this;\n    }\n  };\n\n  $.fn.treetable = function(method) {\n    if (methods[method]) {\n      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\n    } else if (typeof method === 'object' || !method) {\n      return methods.init.apply(this, arguments);\n    } else {\n      return $.error(\"Method \" + method + \" does not exist on jQuery.treetable\");\n    }\n  };\n\n  return $;\n});\n\ndefine('skylark-jquery-treetable/main',[\r\n  \"./treetable\",\r\n  \"./Node\",\r\n  \"./Tree\",\r\n  \"./jquery.treetable\"\r\n],function(treetable,Node,Tree){\r\n\treturn treetable;\r\n});\ndefine('skylark-jquery-treetable', ['skylark-jquery-treetable/main'], function (main) { return main; });\n\n"]}